import os
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
from keep_alive import keep_alive
keep_alive()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Developer information
DEVELOPER_NAME = "Latiful Hassan Zihan 🇵🇸"
DEVELOPER_USERNAME = "@alwayszihan"

# Start command
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("Generate Cards", callback_data='gen')],
        [InlineKeyboardButton("Help", callback_data='help'),
         InlineKeyboardButton("Developer", callback_data='developer')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"👋 Welcome to the Card Generator Bot!\n\n"
        f"Created by {DEVELOPER_NAME} ({DEVELOPER_USERNAME})\n\n"
        "Use /gen followed by a bin to generate cards or use the buttons below:",
        reply_markup=reply_markup
    )

# Help command
async def help_command(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("Generate Cards", callback_data='gen')],
        [InlineKeyboardButton("Back to Start", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "🤖 *Bot Commands:*\n\n"
        "/start - Start the bot\n"
        "/help - Show this help message\n"
        "/developer - Show developer information\n"
        "/gen XXXXXXXXXXXX - Generate cards with specified BIN\n"
        ".gen XXXXXXXXXXXX - Alternative generate command\n\n"
        "*Examples:*\n"
        "/gen 1737363XXX\n"
        "/gen 123456XXXXXX\n"
        ".gen 123456|12|25|123\n\n"
        "Replace X's with random digits or specify full details.",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

# Developer command
async def developer(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("Generate Cards", callback_data='gen')],
        [InlineKeyboardButton("Back to Start", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"👨‍💻 *Developer Information:*\n\n"
        f"Name: {DEVELOPER_NAME}\n"
        f"Username: {DEVELOPER_USERNAME}\n\n"
        "This bot was created to generate test card numbers for validation purposes.",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

# Generate cards function
async def generate_cards(update: Update, context: CallbackContext) -> None:
    # Check if command is used in inline mode or with callback
    if update.callback_query and context.args == []:
        # Inline keyboard used, ask for BIN
        await update.callback_query.message.reply_text(
            "Please send your BIN in the format:\n\n"
            "/gen XXXXXXXXXXXX\n\n"
            "Example: /gen 1737363XXX"
        )
        await update.callback_query.answer()
        return
    
    # Check if we have a message with arguments
    if not context.args:
        await update.message.reply_text(
            "Please provide a BIN after the command.\n\n"
            "Example: /gen 1737363XXX\n"
            "Or: /gen 123456|12|25|123"
        )
        return
    
    input_text = ' '.join(context.args)
    
    # Parse the input
    if '|' in input_text:
        # Format: bin|mm|yy|cvv
        parts = input_text.split('|')
        if len(parts) < 4:
            await update.message.reply_text(
                "Invalid format. Please use: BIN|MM|YY|CVV\n\n"
                "Example: /gen 123456|12|25|123"
            )
            return
            
        bin_part = parts[0].strip()
        mm = parts[1].strip()
        yy = parts[2].strip()
        cvv = parts[3].strip()
        
        # Generate 5 cards with the same details but different numbers
        cards = generate_cards_from_bin(bin_part, 5)
        
        # Format the response
        response = "💳 *Generated Cards:*\n\n"
        for i, card in enumerate(cards, 1):
            response += f"{i}. `{card}|{mm}|{yy}|{cvv}`\n"
            
        response += f"\nGenerated by {DEVELOPER_NAME}"
        
    else:
        # Format: just the BIN
        bin_part = input_text
        
        # Generate 5 cards
        cards = generate_cards_from_bin(bin_part, 5)
        
        # Format the response
        response = "💳 *Generated Cards:*\n\n"
        for i, card in enumerate(cards, 1):
            response += f"{i}. `{card}`\n"
            
        response += f"\nGenerated by {DEVELOPER_NAME}"
    
    # Create inline keyboard
    keyboard = [
        [InlineKeyboardButton("Generate More", callback_data='gen')],
        [InlineKeyboardButton("Help", callback_data='help'),
         InlineKeyboardButton("Developer", callback_data='developer')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        response,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

# Generate cards from BIN pattern
def generate_cards_from_bin(bin_pattern, count=5):
    cards = []
    x_count = bin_pattern.count('X')
    
    for _ in range(count):
        card_number = bin_pattern
        # Replace each X with a random digit
        for _ in range(x_count):
            card_number = card_number.replace('X', str(random.randint(0, 9)), 1)
        cards.append(card_number)
    
    return cards

# Handle inline keyboard button presses
async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data == 'start':
        await start_callback(update, context)
    elif query.data == 'help':
        await help_callback(update, context)
    elif query.data == 'developer':
        await developer_callback(update, context)
    elif query.data == 'gen':
        await generate_callback(update, context)

# Callback functions for inline keyboard
async def start_callback(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("Generate Cards", callback_data='gen')],
        [InlineKeyboardButton("Help", callback_data='help'),
         InlineKeyboardButton("Developer", callback_data='developer')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.edit_text(
        f"👋 Welcome to the Card Generator Bot!\n\n"
        f"Created by {DEVELOPER_NAME} ({DEVELOPER_USERNAME})\n\n"
        "Use /gen followed by a bin to generate cards or use the buttons below:",
        reply_markup=reply_markup
    )

async def help_callback(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("Generate Cards", callback_data='gen')],
        [InlineKeyboardButton("Back to Start", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.edit_text(
        "🤖 *Bot Commands:*\n\n"
        "/start - Start the bot\n"
        "/help - Show this help message\n"
        "/developer - Show developer information\n"
        "/gen XXXXXXXXXXXX - Generate cards with specified BIN\n"
        ".gen XXXXXXXXXXXX - Alternative generate command\n\n"
        "*Examples:*\n"
        "/gen 1737363XXX\n"
        "/gen 123456XXXXXX\n"
        ".gen 123456|12|25|123\n\n"
        "Replace X's with random digits or specify full details.",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

async def developer_callback(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("Generate Cards", callback_data='gen')],
        [InlineKeyboardButton("Back to Start", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.edit_text(
        f"👨‍💻 *Developer Information:*\n\n"
        f"Name: {DEVELOPER_NAME}\n"
        f"Username: {DEVELOPER_USERNAME}\n\n"
        "This bot was created to generate test card numbers for validation purposes.",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

async def generate_callback(update: Update, context: CallbackContext) -> None:
    await update.callback_query.message.reply_text(
        "Please send your BIN in the format:\n\n"
        "/gen XXXXXXXXXXXX\n\n"
        "Example: /gen 1737363XXX"
    )

# Error handler
async def error_handler(update: Update, context: CallbackContext) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

# Main function
def main() -> None:
    # Get the bot token from environment variable
    token = os.getenv('7922254969:AAG8O460ydaWYs4ISAdxI2IffTnssfXLh7Y')
    if not token:
        print("Please set the TELEGRAM_BOT_TOKEN environment variable")
        return
    
    # Create the Application
    application = Application.builder().token(token).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("developer", developer))
    application.add_handler(CommandHandler("gen", generate_cards))
    application.add_handler(CommandHandler("gen", generate_cards))  # Handle both /gen and .gen
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # Add error handler
    application.add_error_handler(error_handler)
    
    # Start the Bot
    print("Bot is running...")
    application.run_polling()

if __name__ == '__main__':
    main()